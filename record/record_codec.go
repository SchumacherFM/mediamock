// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package record

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF84020 = 1
	codecSelferC_RAW4020  = 0
	// ----- value types used ----
	codecSelferValueTypeArray4020 = 10
	codecSelferValueTypeMap4020   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey4020    = 2
	codecSelfer_containerMapValue4020  = 3
	codecSelfer_containerMapEnd4020    = 4
	codecSelfer_containerArrayElem4020 = 6
	codecSelfer_containerArrayEnd4020  = 7
)

var (
	codecSelferBitsize4020                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr4020 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer4020 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 time.Time
		_ = v0
	}
}

func (x *Record) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4020
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4020)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84020, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4020)
				r.EncodeString(codecSelferC_UTF84020, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue4020)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84020, string(x.Path))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4020)
				yy7 := &x.ModTime
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if yym9 := z.TimeRtidIfBinc(); yym9 != 0 {
					r.EncodeBuiltin(yym9, yy7)
				} else if z.HasExtensions() && z.EncExt(yy7) {
				} else if yym8 {
					z.EncBinaryMarshal(yy7)
				} else if !yym8 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy7)
				} else {
					z.EncFallback(yy7)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4020)
				r.EncodeString(codecSelferC_UTF84020, string("ModTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue4020)
				yy10 := &x.ModTime
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
					r.EncodeBuiltin(yym12, yy10)
				} else if z.HasExtensions() && z.EncExt(yy10) {
				} else if yym11 {
					z.EncBinaryMarshal(yy10)
				} else if !yym11 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy10)
				} else {
					z.EncFallback(yy10)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4020)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.Width))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4020)
				r.EncodeString(codecSelferC_UTF84020, string("Width"))
				z.EncSendContainerState(codecSelfer_containerMapValue4020)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Width))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4020)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeInt(int64(x.Height))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4020)
				r.EncodeString(codecSelferC_UTF84020, string("Height"))
				z.EncSendContainerState(codecSelfer_containerMapValue4020)
				yym18 := z.EncBinary()
				_ = yym18
				if false {
				} else {
					r.EncodeInt(int64(x.Height))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4020)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4020)
			}
		}
	}
}

func (x *Record) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4020
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym19 := z.DecBinary()
	_ = yym19
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct20 := r.ContainerType()
		if yyct20 == codecSelferValueTypeMap4020 {
			yyl20 := r.ReadMapStart()
			if yyl20 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4020)
			} else {
				x.codecDecodeSelfFromMap(yyl20, d)
			}
		} else if yyct20 == codecSelferValueTypeArray4020 {
			yyl20 := r.ReadArrayStart()
			if yyl20 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4020)
			} else {
				x.codecDecodeSelfFromArray(yyl20, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4020)
		}
	}
}

func (x *Record) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4020
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys21Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys21Slc
	var yyhl21 bool = l >= 0
	for yyj21 := 0; ; yyj21++ {
		if yyhl21 {
			if yyj21 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4020)
		yys21Slc = r.DecodeBytes(yys21Slc, true, true)
		yys21 := string(yys21Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue4020)
		switch yys21 {
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "ModTime":
			if r.TryDecodeAsNil() {
				x.ModTime = time.Time{}
			} else {
				yyv23 := &x.ModTime
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else if yym25 := z.TimeRtidIfBinc(); yym25 != 0 {
					r.DecodeBuiltin(yym25, yyv23)
				} else if z.HasExtensions() && z.DecExt(yyv23) {
				} else if yym24 {
					z.DecBinaryUnmarshal(yyv23)
				} else if !yym24 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv23)
				} else {
					z.DecFallback(yyv23, false)
				}
			}
		case "Width":
			if r.TryDecodeAsNil() {
				x.Width = 0
			} else {
				x.Width = int(r.DecodeInt(codecSelferBitsize4020))
			}
		case "Height":
			if r.TryDecodeAsNil() {
				x.Height = 0
			} else {
				x.Height = int(r.DecodeInt(codecSelferBitsize4020))
			}
		default:
			z.DecStructFieldNotFound(-1, yys21)
		} // end switch yys21
	} // end for yyj21
	z.DecSendContainerState(codecSelfer_containerMapEnd4020)
}

func (x *Record) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4020
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj28 int
	var yyb28 bool
	var yyhl28 bool = l >= 0
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4020)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4020)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4020)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4020)
	if r.TryDecodeAsNil() {
		x.ModTime = time.Time{}
	} else {
		yyv30 := &x.ModTime
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else if yym32 := z.TimeRtidIfBinc(); yym32 != 0 {
			r.DecodeBuiltin(yym32, yyv30)
		} else if z.HasExtensions() && z.DecExt(yyv30) {
		} else if yym31 {
			z.DecBinaryUnmarshal(yyv30)
		} else if !yym31 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv30)
		} else {
			z.DecFallback(yyv30, false)
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4020)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4020)
	if r.TryDecodeAsNil() {
		x.Width = 0
	} else {
		x.Width = int(r.DecodeInt(codecSelferBitsize4020))
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4020)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4020)
	if r.TryDecodeAsNil() {
		x.Height = 0
	} else {
		x.Height = int(r.DecodeInt(codecSelferBitsize4020))
	}
	for {
		yyj28++
		if yyhl28 {
			yyb28 = yyj28 > l
		} else {
			yyb28 = r.CheckBreak()
		}
		if yyb28 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4020)
		z.DecStructFieldNotFound(yyj28-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4020)
}
